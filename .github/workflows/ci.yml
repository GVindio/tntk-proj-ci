name: Integration

on:
  push:
    branches: ["prod"]
  pull_request:
    branches: ["prod"]
  workflow_dispatch:

env:
  ENVIRONMENT: ${{ github.ref_name }}
  ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}  # Assuming this is set as a secret
  AWS_REGION: us-east-1  # Directly setting the region here
  BASE_DOMAIN: tntkproject.kloudtokloudshop.com
  APPLICATION_NAME: demoapp
  APPLICATION_NAMESPACE: application
  CD_DESTINATION_OWNER: GVindio
  CD_PROJECT: tntk-proj-cd

jobs:
  get_inputs:
    runs-on: ubuntu-latest
    environment: tntk-proj
    outputs:
      sqs_arn: ${{ steps.aws_resources.outputs.sqs_arn }}
      sha8: ${{ steps.slug.outputs.sha8 }}
    steps:
      - name: Get short SHA
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/GitHubActionsRole
          role-duration-seconds: 1200
          role-session-name: GitHubActionsSession
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
      - name: Get SQS queue ARN
        run: |
          echo "sqs_arn=$(aws sqs get-queue-attributes --queue-url $(aws sqs list-queues --region ${{ env.AWS_REGION }} | jq -r .QueueUrls[0]) --attribute-names QueueArn --region ${{ env.AWS_REGION }} | jq -r .Attributes.QueueArn)" >> $GITHUB_OUTPUT

  build_images_and_push:
    runs-on: ubuntu-latest
    environment: tntk-proj
    needs: [get_inputs]
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials again for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/GitHubActionsRole
          role-duration-seconds: 1200
          role-session-name: GitHubActionsSession
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push API image to ECR
        env:
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMPONENT_NAME: "api"
        run: |
          docker build -f .devops/docker/$COMPONENT_NAME.dockerfile -t $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8 src/$COMPONENT_NAME/
          docker push $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8
      - name: Build and push UI image to ECR
        env:
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMPONENT_NAME: "ui"
        run: |
          docker build -f .devops/docker/$COMPONENT_NAME.dockerfile -t $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8 src/$COMPONENT_NAME/
          docker push $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8
      - name: Build and push Lambda image to ECR
        env:
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMPONENT_NAME: "lambda"
        run: |
          docker build -f .devops/docker/$COMPONENT_NAME.dockerfile -t $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8 src/api/
          docker push $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8

  k8s_manifest_storing:
    runs-on: ubuntu-latest
    environment: tntk-proj
    needs: [build_images_and_push, get_inputs]
    container:
      image: alpine/helm:latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Kubernetes
        run: |
          helm template $APPLICATION_NAME .devops/helm/demoapp -f .devops/helm/demoapp/values.yaml  --create-namespace -n $APPLICATION_NAMESPACE --output-dir manifest \
            --set api.image.repository=$REGISTRY/$ENVIRONMENT/api \
            --set api.image.tag=$SHA8 \
            --set ui.image.repository=$REGISTRY/$ENVIRONMENT/ui \
            --set ui.image.tag=$SHA8 \
            --set ingress.ingress.hosts[0].host=$APPLICATION_NAME.$ENVIRONMENT.$BASE_DOMAIN \
            --set api.configmapData.SSM_PREFIX=/$ENVIRONMENT \
            --set api.configmapData.AWS_REGION=$AWS_REGION \
            --set lambda.code.imageURI=$REGISTRY/$ENVIRONMENT/lambda:$SHA8 \
            --set lambda.mapping.eventSourceARN=$SQS_ARN \
            --set lambda.name=lambda \
            --set lambda.env=$ENVIRONMENT \
            --set lambda.account_id=$ACCOUNT_ID \
            --set lambda.aws_region=$AWS_REGION
