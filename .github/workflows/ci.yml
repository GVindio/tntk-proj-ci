name: Integration

on:
  push:
    branches: ["prod"]
  pull_request:
    branches: ["prod"]
  workflow_dispatch:

jobs:
  get_inputs:
    runs-on: ubuntu-latest
    environment: tntk-proj  # Name of the environment as defined in GitHub Actions settings
    outputs:
      sqs_arn: ${{ steps.aws_resources.outputs.sqs_arn }}
      sha8: ${{ steps.slug.outputs.sha8 }}
    steps:
      - name: Get short SHA
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  # Using the environment variable directly
          mask-aws-account-id: "false"
      - name: Install AWS cli
        uses: unfor19/install-aws-cli-action@v1
      - name: Get SQS queue arn
        run: |
          echo "sqs_arn=$(aws sqs get-queue-attributes --queue-url $(aws sqs list-queues --region $AWS_REGION | jq -r .QueueUrls[0]) --attribute-names QueueArn --region $AWS_REGION | jq -r .Attributes.QueueArn)" >> $GITHUB_OUTPUT

  build_images_and_push:
    runs-on: ubuntu-latest
    environment: tntk-proj
    needs: [get_inputs]
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: "false"
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push API image to ECR
        env:
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COMPONENT_NAME: "api"
        run: |
          docker build -f .devops/docker/$COMPONENT_NAME.dockerfile -t $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8 src/$COMPONENT_NAME/
          docker push $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8
