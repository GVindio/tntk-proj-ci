name: Integration and Deployment

on:
  push:
    branches:
      - prod
  pull_request:
    branches:
      - prod
  workflow_dispatch:

env:
  ENVIRONMENT: ${{ github.ref_name }}
  ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  BASE_DOMAIN: ${{ vars.BASE_DOMAIN }}
  APPLICATION_NAME: ${{ vars.APPLICATION_NAME }}
  APPLICATION_NAMESPACE: "default"
  REGISTRY: "139675813056.dkr.ecr.us-east-1.amazonaws.com" # Hardcoded value
  CD_DESTINATION_OWNER: "GVindio"  # Hardcoded value
  CD_PROJECT: "tntk-proj-cd"  # Hardcoded value

jobs:
  get_inputs:
    runs-on: ubuntu-latest
    outputs:
      sqs_arn: ${{ steps.aws_resources.outputs.sqs_arn }}
      sha8: ${{ steps.slug.outputs.sha8 }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Get short SHA
        id: slug
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Get SQS queue ARN
        id: aws_resources
        run: |
          echo "sqs_arn=$(aws sqs get-queue-attributes --queue-url $(aws sqs list-queues --region us-east-1 | jq -r .QueueUrls[0]) --attribute-names QueueArn --region us-east-1 | jq -r .Attributes.QueueArn)" >> $GITHUB_OUTPUT

  build_images_and_push:
    runs-on: ubuntu-latest
    needs: [get_inputs]
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build API image and push to ECR
        env:
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          REGISTRY: ${{ env.REGISTRY }}
          COMPONENT_NAME: "api"
        run: |
          docker build -f .devops/docker/$COMPONENT_NAME.dockerfile -t $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8 src/$COMPONENT_NAME/
          docker push $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8

      - name: Build UI image and push to ECR
        env:
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          REGISTRY: ${{ env.REGISTRY }}
          COMPONENT_NAME: "ui"
        run: |
          docker build -f .devops/docker/$COMPONENT_NAME.dockerfile -t $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8 src/$COMPONENT_NAME/
          docker push $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8

      - name: Build Lambda image and push to ECR
        env:
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          REGISTRY: ${{ env.REGISTRY }}
          COMPONENT_NAME: "lambda"
        run: |
          docker build -f .devops/docker/$COMPONENT_NAME.dockerfile -t $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8 src/api/
          docker push $REGISTRY/$ENVIRONMENT/$COMPONENT_NAME:$SHA8

  k8s_manifest_storing:
    runs-on: ubuntu-latest
    needs: [build_images_and_push, get_inputs]
    container:
      image: alpine/helm:latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create Manifest Directory
        run: mkdir -p ./manifest

      - name: Debug Environment Variables
        run: |
          echo "APPLICATION_NAME: $APPLICATION_NAME"
          echo "APPLICATION_NAMESPACE: $APPLICATION_NAMESPACE"

      - name: Debug Helm Command
        run: |
          echo "Helm chart path: .devops/helm/demoapp"
          echo "Output directory: ./manifest"
          ls -al .devops/helm
          ls -al .devops/helm/demoapp
          ls -al ./manifest

      - name: Deploy to Kubernetes
        env:
          REGISTRY: ${{ env.REGISTRY }}
          SHA8: ${{ needs.get_inputs.outputs.sha8 }}
          SQS_ARN: ${{ needs.get_inputs.outputs.sqs_arn }}
        run: |
          helm template $APPLICATION_NAME .devops/helm/demoapp -f .devops/helm/demoapp/values.yaml --create-namespace -n $APPLICATION_NAMESPACE > ./manifest/output.yaml
          mv ./manifest/output.yaml ./manifest/

      - name: Push to Another Repository
        uses: cpina/github-action-push-to-another-repository@main
        with:
          source-directory: "./manifest"
          target-directory: "demoapp"
          destination-github-username: "GVindio"  # Hardcoded value
          destination-repository-name: "tntk-proj-cd"  # Hardcoded value
          target-branch: "prod"
          commit-message: "Update from ORIGIN_COMMIT"
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
